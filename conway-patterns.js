const block = (x, y) => [
  [x, y],
  [x + 1, y],
  [x, y + 1],
  [x + 1, y + 1],
];
const flower = ((x, y) => [
  [x, y - 1],
  [x + 1, y - 1],
  [x + 2, y],
  [x + 2, y + 1],
  [x + 1, y + 2],
  [x, y + 2],
  [x - 1, y + 1],
  [x - 1, y],
])(24, 19);

const butterflyOne = ((x, y) => [
  [x - 1, y - 6],
  [x, y - 5],
  [x, y - 7],
  [x + 1, y - 3],
  [x + 1, y - 4],
  [x + 1, y - 7],
  [x + 1, y - 8],
  [x + 2, y - 3],
  [x + 2, y - 4],
  [x + 2, y - 6],
  [x + 2, y - 7],
  [x + 3, y - 3],
  [x + 3, y - 4],
  [x + 3, y - 6],
  [x + 5, y],
  [x + 6, y - 1],
  [x + 7, y],
  [x + 3, y + 1],
  [x + 4, y + 1],
  [x + 7, y + 1],
  [x + 8, y + 1],
  [x + 3, y + 2],
  [x + 4, y + 2],
  [x + 6, y + 2],
  [x + 7, y + 2],
  [x + 3, y + 3],
  [x + 4, y + 3],
  [x + 6, y + 3],
  [x + 5, y],
  [x - 6, y + 1],
  [x - 7, y],
  [x - 3, y - 1],
  [x - 4, y - 1],
  [x - 7, y - 1],
  [x - 8, y - 1],
  [x - 3, y - 2],
  [x - 4, y - 2],
  [x - 6, y - 2],
  [x - 7, y - 2],
  [x - 3, y - 3],
  [x - 4, y - 3],
  [x - 6, y - 3],
  [x - 5, y],
  [x + 1, y + 6],
  [x, y + 5],
  [x, y + 7],
  [x - 1, y + 3],
  [x - 1, y + 4],
  [x - 1, y + 7],
  [x - 1, y + 8],
  [x - 2, y + 3],
  [x - 2, y + 4],
  [x - 2, y + 6],
  [x - 2, y + 7],
  [x - 3, y + 3],
  [x - 3, y + 4],
  [x - 3, y + 6],
])(49, 49);
const butterflyTwo = ((x, y) => [
  [x - 5, y + 1],
  [x - 3, y + 1],
  [x - 2, y + 1],
  [x - 1, y + 1],
  [x, y + 1],
  [x + 1, y + 1],
  [x + 2, y + 1],
  [x + 3, y + 1],
  [x - 5, y + 2],
  [x - 3, y + 2],
  [x + 4, y + 2],
  [x - 2, y + 3],
  [x + 2, y + 3],
  [x + 3, y + 3],
  [x + 5, y + 3],
  [x + 3, y + 4],
  [x + 5, y + 4],
  [x + 4, y + 5],
  [x + 5, y + 5],
  [x - 3, y + 6],
  [x - 2, y + 6],
  [x - 3, y + 7],
  [x - 2, y + 7],
  [x - 1, y + 7],
  [x, y + 7],
  [x + 1, y + 7],
  [x - 4, y + 8],
  [x - 3, y + 8],
  [x - 2, y + 8],
  [x + 1, y + 8],
  [x - 1, y + 9],
  [x, y + 9],
  [x + 1, y + 9],
  [x - 5, y - 1],
  [x - 3, y - 1],
  [x - 2, y - 1],
  [x - 1, y - 1],
  [x, y - 1],
  [x + 1, y - 1],
  [x + 2, y - 1],
  [x + 3, y - 1],
  [x - 5, y - 2],
  [x - 3, y - 2],
  [x + 4, y - 2],
  [x - 2, y - 3],
  [x + 2, y - 3],
  [x + 3, y - 3],
  [x + 5, y - 3],
  [x + 3, y - 4],
  [x + 5, y - 4],
  [x + 4, y - 5],
  [x + 5, y - 5],
  [x - 3, y - 6],
  [x - 2, y - 6],
  [x - 3, y - 7],
  [x - 2, y - 7],
  [x - 1, y - 7],
  [x, y - 7],
  [x + 1, y - 7],
  [x - 4, y - 8],
  [x - 3, y - 8],
  [x - 2, y - 8],
  [x + 1, y - 8],
  [x - 1, y - 9],
  [x, y - 9],
  [x + 1, y - 9],
])(49, 15);
const butterflyThree = ((x, y) => [
  [x + -3, y + -5],
  [x + 3, y + -5],
  [x + -5, y + -4],
  [x + -4, y + -4],
  [x + -2, y + -4],
  [x + -1, y + -4],
  [x + 1, y + -4],
  [x + 2, y + -4],
  [x + 4, y + -4],
  [x + 5, y + -4],
  [x + -5, y + -3],
  [x + -4, y + -3],
  [x + -2, y + -3],
  [x + -1, y + -3],
  [x + 1, y + -3],
  [x + 2, y + -3],
  [x + 4, y + -3],
  [x + 5, y + -3],
  [x + -2, y + -2],
  [x + -1, y + -2],
  [x + 1, y + -2],
  [x + 2, y + -2],
  [x + -7, y + -1],
  [x + -4, y + -1],
  [x + -3, y + -1],
  [x + 3, y + -1],
  [x + 4, y + -1],
  [x + 7, y + -1],
  [x + -7, y + 0],
  [x + -3, y + 0],
  [x + 3, y + 0],
  [x + 7, y + 0],
  [x + -6, y + 1],
  [x + -4, y + 1],
  [x + 4, y + 1],
  [x + 6, y + 1],
  [x + -6, y + 2],
  [x + -4, y + 2],
  [x + 4, y + 2],
  [x + 6, y + 2],
  [x + -7, y + 3],
  [x + -6, y + 3],
  [x + -4, y + 3],
  [x + 4, y + 3],
  [x + 6, y + 3],
  [x + 7, y + 3],
  [x + -7, y + 4],
  [x + -6, y + 4],
  [x + -5, y + 4],
  [x + -4, y + 4],
  [x + 4, y + 4],
  [x + 5, y + 4],
  [x + 6, y + 4],
  [x + 7, y + 4],
  [x + -5, y + 5],
  [x + -4, y + 5],
  [x + 4, y + 5],
  [x + 5, y + 5],
])(15, 49);
const butterflyFour = ((x, y) => [
  [x + -19, y + -7],
  [x + -5, y + -7],
  [x + -21, y + -6],
  [x + -20, y + -6],
  [x + -18, y + -6],
  [x + -17, y + -6],
  [x + -7, y + -6],
  [x + -6, y + -6],
  [x + -4, y + -6],
  [x + -3, y + -6],
  [x + -18, y + -5],
  [x + -17, y + -5],
  [x + -7, y + -5],
  [x + -6, y + -5],
  [x + -15, y + -4],
  [x + -9, y + -4],
  [x + -18, y + -3],
  [x + -17, y + -3],
  [x + -15, y + -3],
  [x + -9, y + -3],
  [x + -7, y + -3],
  [x + -6, y + -3],
  [x + -20, y + -2],
  [x + -19, y + -2],
  [x + -18, y + -2],
  [x + -6, y + -2],
  [x + -5, y + -2],
  [x + -4, y + -2],
  [x + -20, y + -1],
  [x + -18, y + -1],
  [x + -16, y + -1],
  [x + -14, y + -1],
  [x + -10, y + -1],
  [x + -8, y + -1],
  [x + -6, y + -1],
  [x + -4, y + -1],
  [x + -19, y + 0],
  [x + -13, y + 0],
  [x + -12, y + 0],
  [x + -11, y + 0],
  [x + -5, y + 0],
  [x + -20, y + 1],
  [x + -16, y + 1],
  [x + -14, y + 1],
  [x + -13, y + 1],
  [x + -11, y + 1],
  [x + -10, y + 1],
  [x + -8, y + 1],
  [x + -4, y + 1],
  [x + -13, y + 2],
  [x + -11, y + 2],
  [x + -20, y + 3],
  [x + -19, y + 3],
  [x + -18, y + 3],
  [x + -17, y + 3],
  [x + -16, y + 3],
  [x + -13, y + 3],
  [x + -11, y + 3],
  [x + -8, y + 3],
  [x + -7, y + 3],
  [x + -6, y + 3],
  [x + -5, y + 3],
  [x + -4, y + 3],
  [x + -20, y + 4],
  [x + -15, y + 4],
  [x + -9, y + 4],
  [x + -4, y + 4],
  [x + -15, y + 6],
  [x + -9, y + 6],
  [x + -13, y + 7],
  [x + -12, y + 7],
  [x + -11, y + 7],
  [x + -13, y + 8],
  [x + -12, y + 8],
  [x + -11, y + 8],
  [x + -12, y + 9],
])(90, 80);

const tub = ((x, y) => [
  [x, y - 1],
  [x - 1, y],
  [x + 1, y],
  [x, y + 1],
])(74, 19);
const beehiveV = ((x, y) => [
  [x, y - 1],
  [x + 1, y - 1],
  [x - 1, y],
  [x + 2, y],
  [x, y + 1],
  [x + 1, y + 1],
])(24, 34);
const beehiveH = ((x, y) => [
  [x, y - 1],
  [x - 1, y],
  [x + 1, y],
  [x - 1, y + 1],
  [x + 1, y + 1],
  [x, y + 2],
])(74, 34);
const loafNE = ((x, y) => [
  [x - 1, y - 1],
  [x, y - 1],
  [x - 2, y],
  [x + 1, y],
  [x - 1, y + 1],
  [x + 1, y + 1],
  [x, y + 2],
])(34, 64);
const loafSE = ((x, y) => [
  [x + 1, y],
  [x, y + 1],
  [x - 1, y + 1],
  [x - 2, y],
  [x - 1, y - 1],
  [x, y - 2],
  [x + 1, y - 1],
])(34, 84);
const loafSW = ((x, y) => [
  [x - 1, y],
  [x - 1, y - 1],
  [x, y - 2],
  [x + 1, y - 1],
  [x + 2, y],
  [x + 1, y + 1],
  [x, y + 1],
])(14, 84);
const loafNW = ((x, y) => [
  [x, y - 1],
  [x + 1, y - 1],
  [x + 2, y],
  [x + 1, y + 1],
  [x, y + 2],
  [x - 1, y + 1],
  [x - 1, y],
])(14, 64);
const boatNE = ((x, y) => [
  [x + 1, y - 1],
  [x, y - 1],
  [x - 1, y],
  [x + 1, y],
  [x, y + 1],
])(84, 64);
const boatSE = ((x, y) => [
  [x + 1, y + 1],
  [x, y - 1],
  [x - 1, y],
  [x + 1, y],
  [x, y + 1],
])(84, 84);
const boatSW = ((x, y) => [
  [x - 1, y + 1],
  [x, y - 1],
  [x - 1, y],
  [x + 1, y],
  [x, y + 1],
])(64, 84);
const boatNW = ((x, y) => [
  [x - 1, y - 1],
  [x, y - 1],
  [x - 1, y],
  [x + 1, y],
  [x, y + 1],
])(64, 64);

const blinker = ((x, y) => [
  [x - 1, y],
  [x, y],
  [x + 1, y],
])(14, 14);
const toad1 = ((x, y) => [
  [x - 2, y],
  [x - 1, y - 1],
  [x, y - 1],
  [x - 1, y],
  [x, y],
  [x + 1, y - 1],
])(74, 14);
const toad2 = ((x, y) => [
  [x - 2, y - 1],
  [x - 1, y - 1],
  [x, y - 1],
  [x - 1, y],
  [x, y],
  [x + 1, y],
])(14, 74);
const toad3 = ((x, y) => [
  [x - 1, y - 2],
  [x - 1, y - 1],
  [x, y - 1],
  [x - 1, y],
  [x, y],
  [x, y + 1],
])(34, 54);
const toad4 = ((x, y) => [
  [x, y - 2],
  [x - 1, y - 1],
  [x, y - 1],
  [x - 1, y],
  [x, y],
  [x - 1, y + 1],
])(54, 34);
const becon1 = ((x, y) => [
  [x - 1, y - 1],
  [x - 1, y],
  [x, y],
  [x, y - 1],
  [x + 1, y + 1],
  [x + 1, y + 2],
  [x + 2, y + 2],
  [x + 2, y + 1],
])(19, 39);
const becon2 = ((x, y) => [
  [x + 1, y],
  [x + 1, y - 1],
  [x, y - 1],
  [x, y],
  [x - 1, y + 1],
  [x - 1, y + 2],
  [x - 2, y + 1],
  [x - 2, y + 2],
])(39, 19);
const pulsar = ((x, y) => [
  [x + 2, y + 1],
  [x + 3, y + 1],
  [x + 4, y + 1],
  [x + 1, y + 2],
  [x + 1, y + 3],
  [x + 1, y + 4],
  [x + 2, y + 6],
  [x + 3, y + 6],
  [x + 4, y + 6],
  [x + 6, y + 2],
  [x + 6, y + 3],
  [x + 6, y + 4],
  [x - 2, y + 1],
  [x - 3, y + 1],
  [x - 4, y + 1],
  [x - 1, y + 2],
  [x - 1, y + 3],
  [x - 1, y + 4],
  [x - 2, y + 6],
  [x - 3, y + 6],
  [x - 4, y + 6],
  [x - 6, y + 2],
  [x - 6, y + 3],
  [x - 6, y + 4],
  [x - 2, y - 1],
  [x - 3, y - 1],
  [x - 4, y - 1],
  [x - 1, y - 2],
  [x - 1, y - 3],
  [x - 1, y - 4],
  [x - 2, y - 6],
  [x - 3, y - 6],
  [x - 4, y - 6],
  [x - 6, y - 2],
  [x - 6, y - 3],
  [x - 6, y - 4],
  [x + 2, y - 1],
  [x + 3, y - 1],
  [x + 4, y - 1],
  [x + 1, y - 2],
  [x + 1, y - 3],
  [x + 1, y - 4],
  [x + 2, y - 6],
  [x + 3, y - 6],
  [x + 4, y - 6],
  [x + 6, y - 2],
  [x + 6, y - 3],
  [x + 6, y - 4],
])(59, 59);
const pentadecathlonV = ((x, y) => [
  [x, y - 5],
  [x, y - 4],
  [x - 1, y - 3],
  [x + 1, y - 3],
  [x, y - 2],
  [x, y - 1],
  [x, y],
  [x, y + 1],
  [x - 1, y + 2],
  [x + 1, y + 2],
  [x, y + 3],
  [x, y + 4],
])(59, 84);
const pentadecathlonH = ((x, y) => [
  [x - 5, y],
  [x - 4, y],
  [x - 3, y - 1],
  [x - 3, y + 1],
  [x - 2, y],
  [x - 1, y],
  [x, y],
  [x + 1, y],
  [x + 2, y - 1],
  [x + 2, y + 1],
  [x + 3, y],
  [x + 4, y],
])(84, 59);

const glider1 = ((x, y) => [
  [x - 1, y - 1],
  [x, y - 1],
  [x + 1, y - 1],
  [x + 1, y],
  [x, y + 1],
])(50, 50);
const glider2 = ((x, y) => [
  [x + 1, y - 1],
  [x + 1, y],
  [x + 1, y + 1],
  [x, y + 1],
  [x - 1, y],
])(1, 1);
const dart = ((x, y) => [
  [x + 0, y + -5],
  [x + -1, y + -4],
  [x + 1, y + -4],
  [x + -2, y + -3],
  [x + 2, y + -3],
  [x + -1, y + -2],
  [x + 0, y + -2],
  [x + 1, y + -2],
  [x + -3, y + 0],
  [x + -2, y + 0],
  [x + 2, y + 0],
  [x + 3, y + 0],
  [x + -5, y + 1],
  [x + -1, y + 1],
  [x + 1, y + 1],
  [x + 5, y + 1],
  [x + -6, y + 2],
  [x + -5, y + 2],
  [x + -1, y + 2],
  [x + 1, y + 2],
  [x + 5, y + 2],
  [x + 6, y + 2],
  [x + -7, y + 3],
  [x + -1, y + 3],
  [x + 1, y + 3],
  [x + 7, y + 3],
  [x + -6, y + 4],
  [x + -4, y + 4],
  [x + -3, y + 4],
  [x + -1, y + 4],
  [x + 1, y + 4],
  [x + 3, y + 4],
  [x + 4, y + 4],
  [x + 6, y + 4],
])(80, 20);

const lightWeightSpaceship = ((x, y) => [
  [x - 2, y - 1],
  [x + 1, y - 1],
  [x + 2, y],
  [x - 2, y + 1],
  [x + 2, y + 1],
  [x - 1, y + 2],
  [x, y + 2],
  [x + 1, y + 2],
  [x + 2, y + 2],
])(24, 24);
const mediumWeightSpaceship = ((x, y) => [
  [x, y - 2],
  [x - 2, y - 1],
  [x + 2, y - 1],
  [x - 3, y],
  [x - 3, y + 1],
  [x + 2, y + 1],
  [x - 3, y + 2],
  [x - 2, y + 2],
  [x - 1, y + 2],
  [x, y + 2],
  [x + 1, y + 2],
])(24, 74);
const heavyWeightSpaceship = ((x, y) => [
  [x - 1, y - 3],
  [x + 2, y - 3],
  [x - 2, y - 2],
  [x - 2, y - 1],
  [x + 2, y - 1],
  [x - 2, y],
  [x + 2, y],
  [x - 2, y + 1],
  [x - 2, y + 2],
  [x + 1, y + 2],
  [x - 2, y + 3],
  [x - 1, y + 3],
  [x, y + 3],
])(49, 49);

const gliderStopperNW = (x, y) => [
  [x + -2, y + -2],
  [x + -1, y + -2],
  [x + -2, y + -1],
  [x + 0, y + -1],
  [x + 0, y + 0],
  [x + 0, y + 1],
  [x + 1, y + 1],
];
const gliderStopperNE = (x, y) => [
  [x + 0, y + -2],
  [x + 1, y + -2],
  [x + -1, y + -1],
  [x + 1, y + -1],
  [x + -1, y + 0],
  [x + -2, y + 1],
  [x + -1, y + 1],
];
const gosperGliderGun = ((x, y) => [
  [x, y],
  [x - 1, y - 1],
  [x - 1, y],
  [x - 1, y + 1],
  [x - 2, y - 2],
  [x - 2, y + 2],
  [x - 3, y],
  [x - 4, y - 3],
  [x - 4, y + 3],
  [x - 5, y - 3],
  [x - 5, y + 3],
  [x - 6, y - 2],
  [x - 6, y + 2],
  [x - 7, y - 1],
  [x - 7, y],
  [x - 7, y + 1],

  [x + 3, y - 1],
  [x + 3, y - 2],
  [x + 3, y - 3],
  [x + 4, y - 1],
  [x + 4, y - 2],
  [x + 4, y - 3],
  [x + 5, y],
  [x + 5, y - 4],
  [x + 7, y],
  [x + 7, y - 4],
  [x + 7, y + 1],
  [x + 7, y - 5],

  ...block(x - 17, y - 1),
  ...block(x + 17, y - 2),
])(29, 19);
const simkinGliderGun = ((x, y) => [
  [x + -6, y + -4],
  [x + -5, y + -4],
  [x + -4, y + -4],
  [x + -5, y + -3],
  [x + -5, y + -2],
  [x + -4, y + -2],
  [x + -3, y + -2],
  ...block(x + 5, y - 16),
  ...block(x + 2, y - 12),
  ...block(x + 5, y - 9),
  ...block(x - 6, y + 8),
  ...block(x - 3, y + 11),
  ...block(x - 6, y + 15),
  ...gliderStopperNE(x - 13, y + 7),
])(29, 79);

const randomPattern = (seeds = 1000) => {
  const rndPtn = [];
  for (let seed = 0; seed < seeds; seed++) {
    rndPtn.push([
      Math.floor(Math.random() * 100),
      Math.floor(Math.random() * 100),
    ]);
  }
  return rndPtn;
};

const statics = [
  ...block(49, 19),
  ...flower,
  ...beehiveV,
  ...beehiveH,
  ...loafNE,
  ...loafSE,
  ...loafSW,
  ...loafNW,
  ...boatNE,
  ...boatSE,
  ...boatSW,
  ...boatNW,
  ...tub,
];

const oscillators = [
  ...blinker,
  ...becon1,
  ...becon2,
  ...toad1,
  ...toad2,
  ...toad3,
  ...toad4,
  ...pulsar,
  ...pentadecathlonV,
  ...pentadecathlonH,
];

const gliders = [...glider1, ...glider2, ...dart];

const gliderGuns = [
  ...gosperGliderGun,
  ...simkinGliderGun,
  ...gliderStopperNW(86, 74),
];

const spaceships = [
  ...lightWeightSpaceship,
  ...mediumWeightSpaceship,
  ...heavyWeightSpaceship,
];

const butterflies = [
  ...butterflyOne,
  ...butterflyTwo,
  ...butterflyThree,
  ...butterflyFour,
];
